{"name":"FakeStopwatch","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch","comment":"<p>A <a>quiver/dart-core.Stopwatch</a> implementation that gets the current time in microseconds\nvia a user-supplied function.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Stopwatch"],"subclass":[],"variables":{"frequency":{"name":"frequency","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.frequency","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{"frequency":{"name":"frequency","qualifiedName":"dart-core.Stopwatch.frequency","comment":"<p>Frequency of the elapsed counter in Hz.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"elapsedTicks":{"name":"elapsedTicks","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.elapsedTicks","comment":"<p>Returns the elapsed number of clock ticks since calling <a>quiver/quiver-testing-time.FakeStopwatch.start</a> while the\n<a>dart-core.Stopwatch</a> is running.</p>\n<p>Returns the elapsed number of clock ticks between calling <a>quiver/quiver-testing-time.FakeStopwatch.start</a> and\ncalling <a>quiver/quiver-testing-time.FakeStopwatch.stop</a>.</p>\n<p>Returns 0 if the <a>dart-core.Stopwatch</a> has never been started.</p>\n<p>The elapsed number of clock ticks increases by <a>quiver/quiver-testing-time.FakeStopwatch.frequency</a> every second.</p>","commentFrom":"dart-core.Stopwatch.elapsedTicks","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"elapsed":{"name":"elapsed","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.elapsed","comment":"<p>Returns the <a>quiver/quiver-testing-time.FakeStopwatch.elapsedTicks</a> counter converted to a <a>dart-core.Duration</a>.</p>","commentFrom":"dart-core.Stopwatch.elapsed","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{},"annotations":[]},"elapsedMicroseconds":{"name":"elapsedMicroseconds","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.elapsedMicroseconds","comment":"<p>Returns the <a>quiver/quiver-testing-time.FakeStopwatch.elapsedTicks</a> counter converted to microseconds.</p>","commentFrom":"dart-core.Stopwatch.elapsedMicroseconds","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"elapsedMilliseconds":{"name":"elapsedMilliseconds","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.elapsedMilliseconds","comment":"<p>Returns the <a>quiver/quiver-testing-time.FakeStopwatch.elapsedTicks</a> counter converted to milliseconds.</p>","commentFrom":"dart-core.Stopwatch.elapsedMilliseconds","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isRunning":{"name":"isRunning","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.isRunning","comment":"<p>Returns wether the StopWatch is currently running.</p>","commentFrom":"dart-core.Stopwatch.isRunning","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.FakeStopwatch-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"now":{"name":"now","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"frequency":{"name":"frequency","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"start":{"name":"start","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.start","comment":"<p>Starts the <a>dart-core.Stopwatch</a>.</p>\n<p>The <a>quiver/quiver-testing-time.FakeStopwatch.elapsed</a> count is increasing monotonically. If the <a>dart-core.Stopwatch</a> has\nbeen stopped, then calling start again restarts it without resetting the\n<a>quiver/quiver-testing-time.FakeStopwatch.elapsed</a> count.</p>\n<p>If the <a>dart-core.Stopwatch</a> is currently running, then calling start does nothing.</p>","commentFrom":"dart-core.Stopwatch.start","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"stop":{"name":"stop","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.stop","comment":"<p>Stops the <a>dart-core.Stopwatch</a>.</p>\n<p>The <a>quiver/quiver-testing-time.FakeStopwatch.elapsedTicks</a> count stops increasing after this call. If the\n<a>dart-core.Stopwatch</a> is currently not running, then calling this method has no\neffect.</p>","commentFrom":"dart-core.Stopwatch.stop","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"reset":{"name":"reset","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.reset","comment":"<p>Resets the <a>quiver/quiver-testing-time.FakeStopwatch.elapsed</a> count to zero.</p>\n<p>This method does not stop or start the <a>dart-core.Stopwatch</a>.</p>","commentFrom":"dart-core.Stopwatch.reset","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>quiver/quiver-testing-time.FakeStopwatch.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"elapsedTicks":{"name":"elapsedTicks","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.elapsedTicks","comment":"<p>Returns the elapsed number of clock ticks since calling <a>quiver/quiver-testing-time.FakeStopwatch.start</a> while the\n<a>dart-core.Stopwatch</a> is running.</p>\n<p>Returns the elapsed number of clock ticks between calling <a>quiver/quiver-testing-time.FakeStopwatch.start</a> and\ncalling <a>quiver/quiver-testing-time.FakeStopwatch.stop</a>.</p>\n<p>Returns 0 if the <a>dart-core.Stopwatch</a> has never been started.</p>\n<p>The elapsed number of clock ticks increases by <a>quiver/dart-core.Stopwatch.frequency</a> every second.</p>","commentFrom":"","inheritedFrom":"dart-core.Stopwatch.elapsedTicks","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"elapsed":{"name":"elapsed","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.elapsed","comment":"<p>Returns the <a>quiver/quiver-testing-time.FakeStopwatch.elapsedTicks</a> counter converted to a <a>dart-core.Duration</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Stopwatch.elapsed","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{},"annotations":[]},"elapsedMicroseconds":{"name":"elapsedMicroseconds","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.elapsedMicroseconds","comment":"<p>Returns the <a>quiver/quiver-testing-time.FakeStopwatch.elapsedTicks</a> counter converted to microseconds.</p>","commentFrom":"","inheritedFrom":"dart-core.Stopwatch.elapsedMicroseconds","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"elapsedMilliseconds":{"name":"elapsedMilliseconds","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.elapsedMilliseconds","comment":"<p>Returns the <a>quiver/quiver-testing-time.FakeStopwatch.elapsedTicks</a> counter converted to milliseconds.</p>","commentFrom":"","inheritedFrom":"dart-core.Stopwatch.elapsedMilliseconds","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isRunning":{"name":"isRunning","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.isRunning","comment":"<p>Returns wether the StopWatch is currently running.</p>","commentFrom":"","inheritedFrom":"dart-core.Stopwatch.isRunning","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>quiver/quiver-testing-time.FakeStopwatch.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>quiver/quiver-testing-time.FakeStopwatch.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.noSuchMethod","comment":"<p><a>quiver/quiver-testing-time.FakeStopwatch.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>quiver/quiver-testing-time.FakeStopwatch.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>quiver/quiver-testing-time.FakeStopwatch.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>quiver/quiver-testing-time.FakeStopwatch.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"start":{"name":"start","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.start","comment":"<p>Starts the <a>dart-core.Stopwatch</a>.</p>\n<p>The <a>quiver/quiver-testing-time.FakeStopwatch.elapsed</a> count is increasing monotonically. If the <a>dart-core.Stopwatch</a> has\nbeen stopped, then calling start again restarts it without resetting the\n<a>quiver/quiver-testing-time.FakeStopwatch.elapsed</a> count.</p>\n<p>If the <a>dart-core.Stopwatch</a> is currently running, then calling start does nothing.</p>","commentFrom":"","inheritedFrom":"dart-core.Stopwatch.start","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"stop":{"name":"stop","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.stop","comment":"<p>Stops the <a>dart-core.Stopwatch</a>.</p>\n<p>The <a>quiver/quiver-testing-time.FakeStopwatch.elapsedTicks</a> count stops increasing after this call. If the\n<a>dart-core.Stopwatch</a> is currently not running, then calling this method has no\neffect.</p>","commentFrom":"","inheritedFrom":"dart-core.Stopwatch.stop","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"reset":{"name":"reset","qualifiedName":"quiver/quiver-testing-time.FakeStopwatch.reset","comment":"<p>Resets the <a>quiver/quiver-testing-time.FakeStopwatch.elapsed</a> count to zero.</p>\n<p>This method does not stop or start the <a>dart-core.Stopwatch</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Stopwatch.reset","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}