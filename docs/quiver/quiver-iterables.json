{"name":"quiver-iterables","qualifiedName":"quiver/quiver-iterables","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"zip":{"name":"zip","qualifiedName":"quiver/quiver-iterables.zip","comment":"<p>Returns an <a>dart-core.Iterable</a> of <a>dart-core.List</a>s where the nth element in the returned\niterable contains the nth element from every Iterable in <a>quiver/quiver-iterables.zip.iterables</a>. The\nreturned Iterable is as long as the shortest Iterable in the argument. If\n<a>quiver/quiver-iterables.zip.iterables</a> is empty, it returns an empty list.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.List","inner":[]}]}],"parameters":{"iterables":{"name":"iterables","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Iterable","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"range":{"name":"range","qualifiedName":"quiver/quiver-iterables.range","comment":"<p>Returns an <a>dart-core.Iterable</a> sequence of <a>dart-core.num</a>s.</p>\n<p>If only one argument is provided, [start_or_stop] is the upper bound for the\nsequence. If two or more arguments are provided, <a>quiver/quiver-iterables.range.stop</a> is the upper bound.</p>\n<p>The sequence starts at 0 if one argument is provided, or [start_or_stop] if\ntwo or more arguments are provided. The sequence increments by 1, or <a>quiver/quiver-iterables.range.step</a>\nif provided. <a>quiver/quiver-iterables.range.step</a> can be negative, in which case the sequence counts down\nfrom the starting point and <a>quiver/quiver-iterables.range.stop</a> must be less than the starting point so\nthat it becomes the lower bound.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.num","inner":[]}]}],"parameters":{"start_or_stop":{"name":"start_or_stop","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"stop":{"name":"stop","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"step":{"name":"step","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"partition":{"name":"partition","qualifiedName":"quiver/quiver-iterables.partition","comment":"<p>Partitions the input iterable into lists of the specified size.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.List","inner":[]}]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]},"size":{"name":"size","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"extent":{"name":"extent","qualifiedName":"quiver/quiver-iterables.extent","comment":"<p>Returns the minimum and maximum values in <a>quiver/quiver-iterables.extent.i</a>, according to the order\nspecified by the <a>quiver/quiver-iterables.extent.compare</a> function, in an <a>quiver/quiver-iterables.Extent</a> instance. Always returns\nan <a>quiver/quiver-iterables.Extent</a>, but <a>quiver/quiver-iterables.Extent.min</a> and <a>quiver/quiver-iterables.Extent.max</a> may be <code>null</code> if <a>quiver/quiver-iterables.extent.i</a> is empty.</p>\n<p>The compare function must act as a <a>dart-core.Comparator</a>. If <a>quiver/quiver-iterables.extent.compare</a> is omitted,\n<a>quiver/dart-core.Comparable.compare</a> is used. If <a>quiver/quiver-iterables.extent.i</a> contains null elements, an exception\nwill be thrown.</p>\n<p>If <a>quiver/quiver-iterables.extent.i</a> is empty, an <a>quiver/quiver-iterables.Extent</a> is returned with <code>null</code> values for <code>min</code> and\n<code>max</code>, since there are no valid values for them.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"quiver/quiver-iterables.Extent","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]},"compare":{"name":"compare","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Comparator","inner":[]}],"value":"function(Comparable#compare)","annotations":[]}},"annotations":[]},"min":{"name":"min","qualifiedName":"quiver/quiver-iterables.min","comment":"<p>Returns the minimum value in <a>quiver/quiver-iterables.min.i</a>, according to the order specified by the\n<a>quiver/quiver-iterables.min.compare</a> function, or <code>null</code> if <a>quiver/quiver-iterables.min.i</a> is empty.</p>\n<p>The compare function must act as a <a>dart-core.Comparator</a>. If <a>quiver/quiver-iterables.min.compare</a> is omitted,\n<a>quiver/dart-core.Comparable.compare</a> is used. If <a>quiver/quiver-iterables.min.i</a> contains null elements, an exception\nwill be thrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]},"compare":{"name":"compare","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Comparator","inner":[]}],"value":"function(Comparable#compare)","annotations":[]}},"annotations":[]},"max":{"name":"max","qualifiedName":"quiver/quiver-iterables.max","comment":"<p>Returns the maximum value in <a>quiver/quiver-iterables.max.i</a>, according to the order specified by the\n<a>quiver/quiver-iterables.max.compare</a> function, or <code>null</code> if <a>quiver/quiver-iterables.max.i</a> is empty.</p>\n<p>The compare function must act as a <a>dart-core.Comparator</a>. If <a>quiver/quiver-iterables.max.compare</a> is omitted,\n<a>quiver/dart-core.Comparable.compare</a> is used. If <a>quiver/quiver-iterables.max.i</a> contains null elements, an exception\nwill be thrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]},"compare":{"name":"compare","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Comparator","inner":[]}],"value":"function(Comparable#compare)","annotations":[]}},"annotations":[]},"merge":{"name":"merge","qualifiedName":"quiver/quiver-iterables.merge","comment":"<p>Returns the result of merging an <a>dart-core.Iterable</a> of <a>dart-core.Iterable</a>s, according to\nthe order specified by the <a>quiver/quiver-iterables.merge.compare</a> function. This function assumes the\nprovided iterables are already sorted according to the provided <a>quiver/quiver-iterables.merge.compare</a>\nfunction. It will not check for this condition or sort the iterables.</p>\n<p>The compare function must act as a <a>dart-core.Comparator</a>. If <a>quiver/quiver-iterables.merge.compare</a> is omitted,\n<a>quiver/dart-core.Comparable.compare</a> is used.</p>\n<p>If any of the <a>quiver/quiver-iterables.merge.iterables</a> contain null elements, an exception will be\nthrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"iterables":{"name":"iterables","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Iterable","inner":[]}]}],"value":"null","annotations":[]},"compare":{"name":"compare","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Comparator","inner":[]}],"value":"function(Comparable#compare)","annotations":[]}},"annotations":[]},"enumerate":{"name":"enumerate","qualifiedName":"quiver/quiver-iterables.enumerate","comment":"<p>Returns an <a>dart-core.Iterable</a> of <a>quiver/quiver-iterables.IndexedValue</a>s where the nth value holds the nth\nelement of <a>quiver/quiver-iterables.enumerate.iterable</a> and its index.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"quiver/quiver-iterables.IndexedValue","inner":[]}]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cycle":{"name":"cycle","qualifiedName":"quiver/quiver-iterables.cycle","comment":"<p>Returns an <a>dart-core.Iterable</a> that infinitely cycles through the elements of\n<a>quiver/quiver-iterables.cycle.iterable</a>. If <a>quiver/quiver-iterables.cycle.iterable</a> is empty, the returned Iterable will also be empty.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"count":{"name":"count","qualifiedName":"quiver/quiver-iterables.count","comment":"<p>Returns an infinite <a>dart-core.Iterable</a> of <a>dart-core.num</a>s, starting from <a>quiver/quiver-iterables.count.start</a> and\nincreasing by <a>quiver/quiver-iterables.count.step</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.num","inner":[]}]}],"parameters":{"start":{"name":"start","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"0","annotations":[]},"step":{"name":"step","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"concat":{"name":"concat","qualifiedName":"quiver/quiver-iterables.concat","comment":"<p>Returns the concatentation of the input iterables.</p>\n<p>The returned iterable is a lazily-evaluated view on the input iterables.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"iterables":{"name":"iterables","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.Iterable","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Extent","qualifiedName":"quiver/quiver-iterables.Extent"},{"name":"InfiniteIterable","qualifiedName":"quiver/quiver-iterables.InfiniteIterable","preview":"<p>A base class for <a>quiver/dart-core.Iterable</a>s of infinite length that throws\n<a>quiver/dart-core.UnsupportedError</a> for methods that would require the Iterable to terminate.</p>"},{"name":"EnumerateIterator","qualifiedName":"quiver/quiver-iterables.EnumerateIterator","preview":"<p>The <a>quiver/dart-core.Iterator</a> returned by <a>quiver/quiver-iterables.EnumerateIterable.iterator</a>.</p>"},{"name":"EnumerateIterable","qualifiedName":"quiver/quiver-iterables.EnumerateIterable","preview":"<p>An <a>quiver/dart-core.Iterable</a> of <a>quiver/quiver-iterables.IndexedValue</a>s where the nth value holds the nth\nelement of iterable and its index. See <a>quiver/quiver-iterables.enumerate</a>.</p>"},{"name":"IndexedValue","qualifiedName":"quiver/quiver-iterables.IndexedValue"}],"typedef":{},"error":[]},"packageName":"quiver","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\">!<a href=\"https://drone.io/github.com/google/quiver-dart/status.png\">Build Status</a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing-async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing-runtime\">quiver.testing.runtime</a></h2>\n<p><code>assertCheckedMode</code> asserts the current runtime has checked mode enabled.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing-time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"}