{"name":"Optional","qualifiedName":"quiver/quiver-core.Optional","comment":"<p>A value that might be absent.</p>\n<p>Use Optional as an alternative to allowing fields, parameters or return\nvalues to be null. It signals that a value is not required and provides\nconvenience methods for dealing with the absent case.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isPresent":{"name":"isPresent","qualifiedName":"quiver/quiver-core.Optional.isPresent","comment":"<p>Whether the Optional contains a value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"value":{"name":"value","qualifiedName":"quiver/quiver-core.Optional.value","comment":"<p>Gets the Optional value.</p>\n<p>Throws <a>dart-core.StateError</a> if <a>quiver/quiver-core.Optional.value</a> is null.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"quiver/quiver-core.Optional.T","inner":[]}],"parameters":{},"annotations":[]},"orNull":{"name":"orNull","qualifiedName":"quiver/quiver-core.Optional.orNull","comment":"<p>Gets the Optional value, or null if there is none.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"quiver/quiver-core.Optional.T","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"quiver/quiver-core.Optional.hashCode","comment":"<p>Delegates to the underlying <a>quiver/quiver-core.Optional.value</a> hashCode.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"absent":{"name":"absent","qualifiedName":"quiver/quiver-core.Optional.Optional-absent","comment":"<p>Constructs an empty Optional.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"of":{"name":"of","qualifiedName":"quiver/quiver-core.Optional.Optional-of","comment":"<p>Constructs an Optional of the given <a>quiver/quiver-core.Optional.Optional-of.value</a>.</p>\n<p>Throws <a>dart-core.ArgumentError</a> if <a>quiver/quiver-core.Optional.Optional-of.value</a> is null.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"quiver/quiver-core.Optional.T","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"fromNullable":{"name":"fromNullable","qualifiedName":"quiver/quiver-core.Optional.Optional-fromNullable","comment":"<p>Constructs an Optional of the given <a>quiver/quiver-core.Optional.Optional-fromNullable.value</a>.</p>\n<p>If <a>quiver/quiver-core.Optional.Optional-fromNullable.value</a> is null, returns absent().</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"quiver/quiver-core.Optional.T","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"quiver/quiver-core.Optional.==","comment":"<p>Delegates to the underlying <a>quiver/quiver-core.Optional.value</a> operator==.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"o":{"name":"o","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"ifPresent":{"name":"ifPresent","qualifiedName":"quiver/quiver-core.Optional.ifPresent","comment":"<p>Executes a function if the Optional value is present.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"ifPresent":{"name":"ifPresent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"ifAbsent":{"name":"ifAbsent","qualifiedName":"quiver/quiver-core.Optional.ifAbsent","comment":"<p>Execution a function if the Optional value is absent.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"ifAbsent":{"name":"ifAbsent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"or":{"name":"or","qualifiedName":"quiver/quiver-core.Optional.or","comment":"<p>Gets the Optional value with a default.</p>\n<p>The default is returned if the Optional is absent().</p>\n<p>Throws <a>dart-core.ArgumentError</a> if <a>quiver/quiver-core.Optional.or.defaultValue</a> is null.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"quiver/quiver-core.Optional.T","inner":[]}],"parameters":{"defaultValue":{"name":"defaultValue","optional":false,"named":false,"default":false,"type":[{"outer":"quiver/quiver-core.Optional.T","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"transform":{"name":"transform","qualifiedName":"quiver/quiver-core.Optional.transform","comment":"<p>Transforms the Optional value.</p>\n<p>If the Optional is absent(), returns absent() without applying the transformer.</p>\n<p>The transformer must not return null. If it does, an <a>dart-core.ArgumentError</a> is thrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"quiver/quiver-core.Optional","inner":[]}],"parameters":{"transformer":{"name":"transformer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"quiver/quiver-core.Optional.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"quiver/quiver-core.Optional.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>quiver/quiver-core.Optional.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"quiver/quiver-core.Optional.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"quiver/quiver-core.Optional.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>quiver/quiver-core.Optional.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>quiver/quiver-core.Optional.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"quiver/quiver-core.Optional.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"quiver/quiver-core.Optional.noSuchMethod","comment":"<p><a>quiver/quiver-core.Optional.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>quiver/quiver-core.Optional.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>quiver/quiver-core.Optional.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>quiver/quiver-core.Optional.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}