{"name":"quiver-async","qualifiedName":"quiver/quiver-async","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"forEachAsync":{"name":"forEachAsync","qualifiedName":"quiver/quiver-async.forEachAsync","comment":"<p>Schedules calls to <a>quiver/quiver-async.forEachAsync.action</a> for each element in <a>quiver/quiver-async.forEachAsync.iterable</a>. No more than\n<a>quiver/quiver-async.forEachAsync.maxTasks</a> calls to <a>quiver/quiver-async.forEachAsync.action</a> will be pending at once.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]},"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"quiver/quiver-async.AsyncAction","inner":[]}],"value":"null","annotations":[]},"maxTasks":{"name":"maxTasks","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"reduceAsync":{"name":"reduceAsync","qualifiedName":"quiver/quiver-async.reduceAsync","comment":"<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided <a>quiver/quiver-async.reduceAsync.combine</a> function. Similar to\n<a>quiver/dart-core.Iterable.reduce</a>, except that <a>quiver/quiver-async.reduceAsync.combine</a> is an async function that returns a\n<a>quiver/dart-async.Future</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]},"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"quiver/quiver-async.AsyncCombiner","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"doWhileAsync":{"name":"doWhileAsync","qualifiedName":"quiver/quiver-async.doWhileAsync","comment":"<p>Calls <a>quiver/quiver-async.doWhileAsync.action</a> for each item in <a>quiver/quiver-async.doWhileAsync.iterable</a> in turn, waiting for the Future\nreturned by action to complete.</p>\n<p>If the Future completes to true, iteration continues.</p>\n<p>The Future returned completes to true if the entire iterable was processed,\notherwise false.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]},"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"quiver/quiver-async.AsyncAction","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"createTimerPeriodic":{"name":"createTimerPeriodic","qualifiedName":"quiver/quiver-async.createTimerPeriodic","comment":"<p>Creates a new periodic <a>quiver/dart-async.Timer</a> using\n<code>new Timer.periodic(duration, callback)</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Timer","inner":[]}],"parameters":{"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":"null","annotations":[]},"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"createTimer":{"name":"createTimer","qualifiedName":"quiver/quiver-async.createTimer","comment":"<p>Creates a new one-shot <a>quiver/dart-async.Timer</a> using <code>new Timer(duration, callback)</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Timer","inner":[]}],"parameters":{"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":"null","annotations":[]},"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"StreamRouter","qualifiedName":"quiver/quiver-async.StreamRouter","preview":"<p>Splits a <a>quiver/quiver-async.Stream</a> of events into multiple Streams based on a set of\npredicates.</p>"},{"name":"FutureGroup","qualifiedName":"quiver/quiver-async.FutureGroup","preview":"<p>A collection of <a>quiver/dart-async.Future</a>s that signals when all added Futures complete. New\nFutures can be added to the group as long as it hasn't completed.</p>"},{"name":"CountdownTimer","qualifiedName":"quiver/quiver-async.CountdownTimer","preview":"<p>A simple countdown timer that fires events in regular increments until a\nduration has passed.</p>"}],"typedef":{"AsyncCombiner":{"name":"AsyncCombiner","qualifiedName":"quiver/quiver-async.AsyncCombiner","comment":"<p>An asynchronous funcuntion that combines an element [e] with a previous value\n[previous], for use with [reduceAsync].</p>","return":"dart-async.Future","parameters":{"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"quiver/quiver-async.AsyncCombiner.T","inner":[]}],"value":"null","annotations":[]},"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}},"preview":"<p>An asynchronous funcuntion that combines an element [e] with a previous value\n[previous], for use with [reduceAsync].</p>"},"AsyncAction":{"name":"AsyncAction","qualifiedName":"quiver/quiver-async.AsyncAction","comment":"<p>An asynchronous callback that returns a value.</p>","return":"dart-async.Future","parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}},"preview":"<p>An asynchronous callback that returns a value.</p>"},"CreateTimerPeriodic":{"name":"CreateTimerPeriodic","qualifiedName":"quiver/quiver-async.CreateTimerPeriodic","comment":"<p>The signature of a periodic timer factory.</p>","return":"dart-async.Timer","parameters":{"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":"null","annotations":[]},"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{},"preview":"<p>The signature of a periodic timer factory.</p>"},"CreateTimer":{"name":"CreateTimer","qualifiedName":"quiver/quiver-async.CreateTimer","comment":"<p>The signature of a one-shot [Timer] factory.</p>","return":"dart-async.Timer","parameters":{"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":"null","annotations":[]},"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{},"preview":"<p>The signature of a one-shot [Timer] factory.</p>"}},"error":[]},"packageName":"quiver","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\">!<a href=\"https://drone.io/github.com/google/quiver-dart/status.png\">Build Status</a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing-async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing-runtime\">quiver.testing.runtime</a></h2>\n<p><code>assertCheckedMode</code> asserts the current runtime has checked mode enabled.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing-time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"}