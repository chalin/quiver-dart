{"name":"StreamRouter","qualifiedName":"quiver/quiver-async.StreamRouter","comment":"<p>Splits a <a>quiver/quiver-async.Stream</a> of events into multiple Streams based on a set of\npredicates.</p>\n<p>Using StreamRouter differs from <a>quiver/quiver-async.Stream.where</a> because events are only sent\nto one Stream. If more than one predicate matches the event, the event is\nsent to the stream created by the earlier call to <a>quiver/quiver-async.StreamRouter.route</a>. Events not matched\nby a call to <a>quiver/quiver-async.StreamRouter.route</a> are sent to the <a>quiver/quiver-async.StreamRouter.defaultStream</a>.</p>\n<p>Example:\n  import 'dart:html';\n  import 'package:quiver/async.dart';</p>\n<p>  var router = new StreamRouter(window.onClick);\n  var onRightClick = router.route((e) => e.button == 2);\n  var onAltClick = router.route((e) => e.altKey);\n  var onOtherClick router.defaultStream;</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"defaultStream":{"name":"defaultStream","qualifiedName":"quiver/quiver-async.StreamRouter.defaultStream","comment":"","commentFrom":"quiver-async.StreamRouter.defaultStream","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"quiver/quiver-async.Stream","inner":[{"outer":"quiver/quiver-async.StreamRouter.T","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"quiver/quiver-async.StreamRouter.StreamRouter-","comment":"<p>Create a new StreamRouter that listens to the <a>quiver/quiver-async.StreamRouter.StreamRouter-.incoming</a> stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"incoming":{"name":"incoming","optional":false,"named":false,"default":false,"type":[{"outer":"quiver/quiver-async.Stream","inner":[{"outer":"quiver/quiver-async.StreamRouter.T","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"route":{"name":"route","qualifiedName":"quiver/quiver-async.StreamRouter.route","comment":"<p>Events that match <a>quiver/quiver-async.StreamRouter.route.predicate</a> are sent to the stream created by this\nmethod, and not sent to any other router streams.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"quiver/quiver-async.Stream","inner":[{"outer":"quiver/quiver-async.StreamRouter.T","inner":[]}]}],"parameters":{"predicate":{"name":"predicate","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"quiver/quiver-async.StreamRouter.close","comment":"","commentFrom":"quiver-async.StreamRouter.close","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"quiver/quiver-async.StreamRouter.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>quiver/quiver-async.StreamRouter.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"quiver/quiver-async.StreamRouter.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"quiver/quiver-async.StreamRouter.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>quiver/quiver-async.StreamRouter.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>quiver/quiver-async.StreamRouter.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"quiver/quiver-async.StreamRouter.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"quiver/quiver-async.StreamRouter.noSuchMethod","comment":"<p><a>quiver/quiver-async.StreamRouter.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>quiver/quiver-async.StreamRouter.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>quiver/quiver-async.StreamRouter.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>quiver/quiver-async.StreamRouter.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}